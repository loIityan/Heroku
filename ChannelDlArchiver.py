# -*- coding: utf-8 -*-

__version__ = (1, 2, 1) # –í–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ñ–∏–∫—Å–∞ –±–∞–≥–∞
# meta developer: @Harutyamodules
# name: ChannelDlArchiver

from herokutl.types import Message
from .. import loader, utils
import logging
import os
from pathlib import Path
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
import asyncio
import zipfile 
from typing import Optional, List

logger = logging.getLogger(__name__)

@loader.tds
class ChannelDlArchiver(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –∏
    –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –≤ ZIP-–∞—Ä—Ö–∏–≤–µ.
    –¢–µ–ø–µ—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö –º–µ–¥–∏–∞.
    """

    strings = {
        "name": "ChannelDlArchiver",
        "dl_channel_doc": "<channel_id_or_link> [path] [limit] - Download photos and videos from specified channel. Path and limit are optional.",
        "send_dl_doc": "[channel_id_or_link] - Archive and send downloaded media from channel. If no args, tries to archive last downloaded.",
        "download_started": "‚ú® –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ <b>{}</b>...\n\n–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: <code>{}</code>\n–õ–∏–º–∏—Ç –º–µ–¥–∏–∞: <b>{}</b>",
        "channel_not_found": "üö´ –ö–∞–Ω–∞–ª <b>{}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
        "no_media_found": "üòï –í –∫–∞–Ω–∞–ª–µ <b>{}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        "download_progress": "üîÑ –°–∫–∞—á–∞–Ω–æ: <b>{} / {}</b> –º–µ–¥–∏–∞ –∏–∑ <b>{}</b>...",
        "download_finished": "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ <b>{}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: <b>{}</b> –º–µ–¥–∏–∞.\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: <code>{}</code>",
        "download_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑ <b>{}</b>. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.",
        "media_dl_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ (ID {}): {}",
        "path_created": "üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: <code>{}</code>",
        "archive_creating": "üóúÔ∏è –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ –∏–∑ –ø–∞–ø–∫–∏ <code>{}</code>...",
        "archive_sending": "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—Ä—Ö–∏–≤ <b>{}</b>...",
        "archive_sent_cleaned": "‚úÖ –ê—Ä—Ö–∏–≤ <b>{}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.",
        "archive_send_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {}.\n–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.",
        "archive_not_found_or_empty": "–ü–∞–ø–∫–∞ <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è.",
        "too_many_files_for_zip": "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram (2GB). –§–∞–π–ª—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –ø–∞–ø–∫–µ <code>{}</code>.",
        "invalid_limit": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: <b>{}</b>. –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
    }

    strings_ru = {
        "dl_channel_doc": "<ID_–∏–ª–∏_—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª> [–ø—É—Ç—å] [–ª–∏–º–∏—Ç] - –°–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ü—É—Ç—å –∏ –ª–∏–º–∏—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.",
        "send_dl_doc": "[ID_–∏–ª–∏_—Å—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª] - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ï—Å–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ.",
        "download_started": "‚ú® –ó–∞–ø—É—Å–∫–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ <b>{}</b>...\n\n–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: <code>{}</code>\n–õ–∏–º–∏—Ç –º–µ–¥–∏–∞: <b>{}</b>",
        "channel_not_found": "üö´ –ö–∞–Ω–∞–ª <b>{}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
        "no_media_found": "üòï –í –∫–∞–Ω–∞–ª–µ <b>{}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        "download_progress": "üîÑ –°–∫–∞—á–∞–Ω–æ: <b>{} / {}</b> –º–µ–¥–∏–∞ –∏–∑ <b>{}</b>...",
        "download_finished": "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ <b>{}</b> –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–í—Å–µ–≥–æ —Å–∫–∞—á–∞–Ω–æ: <b>{}</b> –º–µ–¥–∏–∞.\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: <code>{}</code>",
        "download_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑ <b>{}</b>. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.",
        "media_dl_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ (ID {}): {}",
        "path_created": "üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: <code>{}</code>",
        "archive_creating": "üóúÔ∏è –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ –∏–∑ –ø–∞–ø–∫–∏ <code>{}</code>...",
        "archive_sending": "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—Ä—Ö–∏–≤ <b>{}</b>...",
        "archive_sent_cleaned": "‚úÖ –ê—Ä—Ö–∏–≤ <b>{}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.",
        "archive_send_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: {}.\n–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –æ—Å—Ç–∞—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.",
        "archive_not_found_or_empty": "–ü–∞–ø–∫–∞ <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è.",
        "too_many_files_for_zip": "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram (2GB). –§–∞–π–ª—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –ø–∞–ø–∫–µ <code>{}</code>.",
        "invalid_limit": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: <b>{}</b>. –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
        "_cls_doc": "–ú–æ–¥—É–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –∏—Ö –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "download_base_path",
                "downloads",
                lambda: "–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞.",
            ),
            loader.ConfigValue(
                "progress_update_interval",
                50,
                lambda: "–û–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ N —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞.",
            ),
            loader.ConfigValue(
                "max_zip_size_mb",
                1900,
                lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ZIP-–∞—Ä—Ö–∏–≤–∞ –≤ –ú–ë –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (–ª–∏–º–∏—Ç Telegram ~2–ì–ë).",
            ),
        )
        self._last_downloaded_channel_path: Optional[Path] = None

    async def client_ready(self, client, db):
        self.client = client
    
    def _sanitize_title_for_path(self, title: str) -> str:
        """–°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏."""
        sanitized = "".join(
            c for c in title if c.isalnum() or c in (" ", ".", "_", "-")
        ).strip()
        return sanitized.replace(" ", "_")

    def _get_channel_download_path(self, channel_identifier: str) -> Path:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.
        channel_identifier –º–æ–∂–µ—Ç –±—ã—Ç—å username –∏–ª–∏ ID.
        """
        sanitized_identifier = self._sanitize_title_for_path(channel_identifier)
        base_path = Path(self.config["download_base_path"])
        full_path = base_path / sanitized_identifier
        return full_path

    async def dlchannelcmd(self, message: Message):
        """–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        raw_args = utils.get_args_raw(message).split()
        if not raw_args:
            await utils.answer(message, self.strings("dl_channel_doc"))
            return

        channel_id_or_link = raw_args[0]
        custom_path_str = None
        media_limit: Optional[int] = None

        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: –∫–∞–Ω–∞–ª [–ø—É—Ç—å] [–ª–∏–º–∏—Ç]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç —á–∏—Å–ª–æ–º (–ª–∏–º–∏—Ç–æ–º)
        if len(raw_args) > 1:
            try:
                parsed_limit = int(raw_args[-1]) 
                if parsed_limit > 0:
                    media_limit = parsed_limit
                    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç - –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ –ø—É—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–º
                    if len(raw_args) > 2: # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –¥–≤—É—Ö, —Ç–æ —Å—Ä–µ–¥–Ω–∏–µ - —ç—Ç–æ –ø—É—Ç—å
                        custom_path_str = " ".join(raw_args[1:-1])
                else:
                    await utils.answer(message, self.strings("invalid_limit").format(raw_args[-1]))
                    return
            except ValueError:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —á–∏—Å–ª–æ, —Ç–æ —ç—Ç–æ –≤–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –ø—É—Ç—å
                custom_path_str = " ".join(raw_args[1:])
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–∏ –æ–Ω –Ω–µ –±—ã–ª –ª–∏–º–∏—Ç–æ–º), 
        # —Ç–æ —ç—Ç–æ –ø—É—Ç—å
        if len(raw_args) == 2 and media_limit is None:
             custom_path_str = raw_args[1]


        status_msg = None
        try:
            entity = await self.client.get_entity(channel_id_or_link)
            
            if custom_path_str:
                download_path = Path(custom_path_str)
            else:
                download_path = self._get_channel_download_path(entity.title or channel_id_or_link)

            if not download_path.exists():
                download_path.mkdir(parents=True, exist_ok=True)
                status_msg = await utils.answer(message, self.strings("path_created").format(download_path))
                await asyncio.sleep(1) 
            
            limit_display = str(media_limit) if media_limit is not None else "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
            status_msg = await utils.answer(
                message,
                self.strings("download_started").format(entity.title, download_path, limit_display)
            )

            total_media_found = 0
            downloaded_count = 0
            
            logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {entity.title} (–ª–∏–º–∏—Ç: {limit_display})...")
            
            # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∫–∞–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞
            # Telethon.iter_messages —Å–∞–º –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç limit
            async for msg in self.client.iter_messages(entity, reverse=True, limit=media_limit): 
                if msg.photo or (msg.document and msg.document.mime_type and msg.document.mime_type.startswith(("video/", "image/"))):
                    total_media_found += 1 

                    file_name = None
                    if msg.photo:
                        file_name = f"photo_{msg.id}.jpg"
                    elif msg.document and msg.document.mime_type.startswith("video/"):
                        file_name = getattr(msg.document, "file_name", f"video_{msg.id}.mp4")
                    elif msg.document and msg.document.mime_type.startswith("image/"):
                        file_name = getattr(msg.document, "file_name", f"image_{msg.id}.gif")
                        
                    if not file_name: 
                        file_name = f"media_{msg.id}"
                        
                    full_file_path = download_path / file_name

                    try:
                        await self.client.download_media(msg, file=full_file_path)
                        downloaded_count += 1
                        
                        if downloaded_count % self.config["progress_update_interval"] == 0:
                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit –≤–º–µ—Å—Ç–æ utils.edit_message
                            await status_msg.edit(
                                self.strings("download_progress").format(
                                    downloaded_count, total_media_found, entity.title
                                )
                            )
                            await asyncio.sleep(0.5) 
                    except Exception as e:
                        logger.error(self.strings("media_dl_error").format(msg.id, e))

            if downloaded_count == 0 and total_media_found == 0:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit
                await status_msg.edit(self.strings("no_media_found").format(entity.title))
            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit
                await status_msg.edit(
                    self.strings("download_finished").format(entity.title, downloaded_count, download_path)
                )
            
            self._last_downloaded_channel_path = download_path 

        except Exception as e:
            logger.error(f"Error in dlchannelcmd: {e}")
            if status_msg:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
                await status_msg.edit(self.strings("download_error").format(channel_id_or_link))
            else:
                await utils.answer(message, self.strings("channel_not_found").format(channel_id_or_link))

    async def senddlcmd(self, message: Message):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –≤ ZIP-—Ñ–∞–π–ª–µ."""
        args = utils.get_args_raw(message).split(maxsplit=1)
        
        target_path: Optional[Path] = None
        if args:
            channel_identifier = args[0]
            if Path(channel_identifier).is_dir():
                target_path = Path(channel_identifier)
            else:
                target_path = self._get_channel_download_path(channel_identifier)
        else:
            target_path = self._last_downloaded_channel_path

        if not target_path or not target_path.exists() or not any(target_path.iterdir()):
            await utils.answer(message, self.strings("archive_not_found_or_empty").format(target_path or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞–ø–∫–∞"))
            return

        zip_filename = f"{self._sanitize_title_for_path(target_path.name)}_media.zip"
        zip_filepath = Path(zip_filename) 

        status_msg = await utils.answer(message, self.strings("archive_creating").format(target_path))

        try:
            with zipfile.ZipFile(zip_filepath, 'w', zipfile.ZIP_DEFLATED, compresslevel=9) as zipf:
                for file_in_dir in target_path.iterdir():
                    if file_in_dir.is_file():
                        zipf.write(file_in_dir, arcname=file_in_dir.name) 

            if zip_filepath.stat().st_size > self.config["max_zip_size_mb"] * 1024 * 1024:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit
                await status_msg.edit(
                    self.strings("too_many_files_for_zip").format(target_path)
                )
                zip_filepath.unlink(missing_ok=True) 
                return

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit
            await status_msg.edit(self.strings("archive_sending").format(zip_filename))
            
            await self.client.send_file(
                message.peer_id, 
                file=str(zip_filepath),
                caption=f"‚úÖ –ê—Ä—Ö–∏–≤ –º–µ–¥–∏–∞ –∏–∑ {target_path.name}"
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit
            await status_msg.edit(self.strings("archive_sent_cleaned").format(zip_filename))

        except Exception as e:
            logger.error(f"Error creating/sending archive: {e}")
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º status_msg.edit –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            await status_msg.edit(self.strings("archive_send_error").format(e))
        finally:
            zip_filepath.unlink(missing_ok=True)
            if target_path.exists():
                 for file_in_dir in target_path.iterdir():
                    if file_in_dir.is_file():
                        file_in_dir.unlink(missing_ok=True)
                 try:
                     target_path.rmdir() 
                 except OSError:
                     logger.warning(f"Could not remove directory {target_path}, it might not be empty.")